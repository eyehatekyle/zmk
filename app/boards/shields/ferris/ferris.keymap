/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
            combo_bspc {
                timeout-ms = <50>;
                key-positions = <8 9>;
                bindings = <&kp BSPC>;
            };
            combo_del {
                timeout-ms = <50>;
                key-positions = <7 8 9>;
                bindings = <&kp DEL>;
            };
            combo_enter {
                timeout-ms = <50>;
                key-positions = <18 19>;
                bindings = <&kp ENTER>;
            };
            combo_gresc {
                timeout-ms = <50>;
                key-positions = <0 1>;
                bindings = <&gresc>;
            };
            combo_tab {
                timeout-ms = <50>;
                key-positions = <10 11>;
                bindings = <&kp TAB>;
            };
            combo_lsft {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp LSFT>;
            };
            combo_taskmanager {
                timeout-ms = <50>;
                key-positions = <0 20>;
                bindings = <&kp LC(LS(ESC))>;
            };
            combo_screensnip {
                timeout-ms = <50>;
                key-positions = <30 33>;
                bindings = <&kp LG(LS(S))>;
            };
            combo_wack {
                timeout-ms = <50>;
                key-positions = <32 33>;
                bindings = <&kp BSLH>;
            };
            combo_lock {
                timeout-ms = <50>;
                key-positions = <30 31>;
                bindings = <&kp LG(L)>;
            };       
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 					        &kp Y &kp U  &kp I &kp O &kp P 
		&kp A &kp S &kp D &kp F &kp G 			                &kp H &kp J &kp K &kp L &kp SQT
		&mt LSFT Z &kp X &kp C &kp V &kp B		                &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
                                &mo 1 &mt LCTL LGUI             &kp SPC &mo 2  
		>;
		};

       		left_layer {
        bindings = <           
        &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 					        &kp INS &kp HOME &kp UP &kp END &kp DEL 
		&kp TAB &kp F5 &kp F6 &kp F7 &kp F8  					    &kp PG_UP &kp LEFT &kp DOWN &kp RIGHT &kp ENTER 
		&mt LSFT CAPS &kp F9 &kp F10 &kp F11 &kp F12 					        &kp PG_DN &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &kp DEL 
                                 &mo 1 &kp LGUI             &kp RGUI &mo 2
		>;
		};
		
		right_layer {
		bindings = <
        &kp N1  &kp N2 &kp N3 &kp N4 &kp N5 					        &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
		&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_CLR &bt BT_NXT &bt BT_PRV 					        &kp EQUAL &kp SEMI &kp LBKT &kp RBKT &kp BSLH
		&kp LSFT &kp LCTL &kp LGUI &kp LALT &kp RALT 					        &kp MINUS &trans &kp LPAR &kp RPAR &kp FSLH
                                            &mo 3 &kp LCTL               &kp RCTL &mo 2
		>;
		};	
		
		tri_layer {
		bindings = <
        &trans &trans &trans &trans &trans 					        &trans &trans &trans &trans &trans
		&trans &trans &trans &trans &trans 					        &trans &trans &trans &trans &trans 
		&trans  &trans &trans &trans &trans 					        &reset &bootloader &trans &trans &trans   
                                &trans &trans               &trans &trans 
		>;
		};	
        
	};
};
